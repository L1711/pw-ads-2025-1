import * as React from 'react'


function Greeting({initialName = ''}) {
  // üê® inicialize o estado como o valor do localStorage
  // üí∞ window.localStorage.getItem('name') ?? initialName
  const [name, setName] = React.useState(
//Se houver informa√ß√£o armazenada no localStorage, usa essa
//informa√ß√£o.Sen√£o, usa o valor de initialName
//window.localStorage.getItem('name') ?? initialName

//usando LAZY INITTIALIZER
// Especificando uma fun√ß√£o nos parenteses do useState,
// em vez de um valor est√°tico, garantimos que o valor
// inicial da vari√°vel de estado seja ajustado apenas
//uma √∫nica vez, durante a fase de montagem do ciclo
// de vida do componente
// () => initializeNameState()
//   )

//  function initializeNameState() {
//  console.count('Leu LocalStorage')
//  return window.localStorage.getItem('name') ?? initialName
//  }
() => window.localStorage.getItem('name') ?? initialName
  )
// Vari√°vel de estado de contagem
const [count,setCount] =React.useState(0)


  // üê® Aqui √© onde usamos `React.useEffect`.
  // A fun√ß√£o deve armazenar `name` no localStorage.
  // üí∞ window.localStorage.setItem('name', name)

  React.useEffect(() => {
    window.localStorage.setItem('name', name)
    console.count('Atualizou o localStorage')
  }, [name])//Vetor de depend√™ncias
  //Este useEffect sr√° executado apenas quando a vari√°vel de estado for alterada
  function handleChange(event) {
    setName(event.target.value)
  }
  return (
    <div>
      <form>
        <label htmlFor="name">Name: </label>
        <input value={name} onChange={handleChange} id="name" />
        <button type="button" on onClick={() => setCount(count + 1)}>Contagem: {count}</button>
      </form>
      {name ? <strong>Ol√° {name}</strong> : 'Por favor, informe seu nome'}
    </div>
  )
}

function Exercicio02() {
  return <Greeting />
}

export default Exercicio02